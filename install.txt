## Deduplicator-group7-Documentation




### I. Pre-conditions


There is no extra library that you need to install to run our code. 
For running the network access feature, Mac OS and Linux can run SSH directly in terminal. 


If you need to run the code on Windows, please follow the [instruction](https://mobaxterm.mobatek.net/) to realize the network access function.




#### Hardware conditions


According to our test, the code runs successfully on Mac OS, Windows and Linux system.




#### Software conditions


-  Please use IntelliJ IDE to run the project.  


-  Do remember to set language level as "Level 8 - Lambdas".
   - In intellij especially, right click on the Deduplicator folder and select Open Module Setting. You can find Language Level selection there




### II. Supporting files
- Two ASCII files test.txt, test1.txt. ( generated by testCaseGenerator.py)
- testCaseGenerator.py
- test.bmp, test1.bmp


#### Non-standard libraries list


All libraries are imported from java standard library, and there’s no third-party library utilized in this program.


#### Test instruction


A boolean variable called DEBUG is set in the dedup class. Set DEBUG to true and program will run in the unit-test mode. All test cases are located in the class Test and you may wanna play with them :). 


System tests are finished by testing on test.txt, test1.txt, test.bmp and test1.bmp, and follow the workflow as below:
- Add file test.txt
- Add file test1.txt
- Substring search with substring abc
- Delete test.txt, test1.txt in the current working directory
- Retrieve file test.txt, test1.txt
- Add image test.bmp, test1.bmp
- Retrieve image test.bmp, test1.bmp




### III.Execution


#### How to use the deduplicator


The main feature of our project is to store and retrieve files in our Deduplicator file system. Please use following instruction to run our code.


Clone the repository from bitbucket : git clone https://agile.bu.edu/bitbucket/scm/ec504proj/group7.git


If the code is executed in command line, the directory to run the code in is group7/DeDuplicator/out/production/DeDuplicator
the commands should be:
- java dedup -addFile [YourFileName] -locker [YourLockerName]: Store file into the Locker. Move your file to the same directory with the dedup.class. If the locker does not exist, it will automatically generate a locker and store the chunks of the file into the locker.
- java dedup -retrieveFile [YourFileName] -locker [YourLockerName]: Retrieve file from the locker. The file will be retrieved to the same directory with the dedup class. Remember to remove the original file in the directory before test it, because new file will overwrite the original one.






- java dedup -deleteFile [YourFileName] -locker [YourLockerName]: Delete file from the locker.
- java dedup -findSubString [Substring] -locker [YourLockerName] [0 or 1 or 2]: Find files containing specific substring in the target locker. For the last arg in the command, 0 stands for search in ASCII encoding format, 1 for UTF8, and 2 for UTF16.
- java dedup -addImage [YourImageName] -locker [YourLockerName]: Add image into the locker. The image must be in the same directory with the dedup class. If the locker does not exist, it will automatically generate a locker and store the chunks of the file into the locker.
- java dedup -retrieveImage [YourImageName] -locker [YourLockerName]: Retrieve image from the locker. The image will be retrieved to the same directory with the dedup class. Remember to remove the original image in the directory before test it, because new image will overwrite the original one.


If the code is executed in IntelliJ


1. Choose import project on the front page of IntelliJ, go through the process choosing OK, Next, Yes and choose to overwrite the existing.


2. Set language level to 8, in the project go to File -> Project Structure and choose 8 in Language Level select.


3. Since all the operation should be edited in command line argument, you can simulate the command line input in IntelliJ IDE by clicking ‘Edit configurations’ on the right top corner, then type command line arguments in ‘Program argument ’ block. All of the instructions are listed below:
- -addFile [YourFileName] -locker [YourLockerName]: Store file into the Locker. Move your file to the same directory with the dedup.class. If the locker does not exist, it will automatically generate a locker and store the chunks of the file into the locker.
- -retrieveFile [YourFileName] -locker [YourLockerName]: Retrieve file from the locker. The file will be retrieved to the same directory with the dedup class. Remember to remove the original file in the directory before test it, because new file will overwrite the original one.






- -deleteFile [YourFileName] -locker [YourLockerName]: Delete file from the locker.
- -findSubString [Substring] -locker [YourLockerName] [0 or 1 or 2]: Find files containing specific substring in the target locker. For the last arg in the command, 0 stands for search in ASCII encoding format, 1 for UTF8, and 2 for UTF16.
- -addImage [YourImageName] -locker [YourLockerName]: Add image into the locker. The image must be in the same directory with the dedup class. If the locker does not exist, it will automatically generate a locker and store the chunks of the file into the locker.
- -retrieveImage [YourImageName] -locker [YourLockerName]: Retrieve image from the locker. The image will be retrieved to the same directory with the dedup class. Remember to remove the original image in the directory before test it, because new image will overwrite the original one.


#### Network access instruction
- The network access is based on the ssh and the server is running on the personal laptop. So the server’s IP address is changing. If you need to test this function, please email yicunhou@bu.edu and tell us your testing time, we will give you the server hostname and tester account.
- The following instruction assumes the server hostname is dhcp-wifi-8021x-168-122-200-182.bu.edu, so the tester login name is: `tester@dhcp-wifi-8021x-168-122-200-182.bu.edu`, the tester account password is `testec504`
- Linux and Mac OS can run ssh in the terminal directly but Windows users need to download the [MobaXterm](https://mobaxterm.mobatek.net/) Free Home Edition.
- Open the terminal or MobaXterm, type tester account directly:
`ssh tester@dhcp-wifi-8021x-168-122-200-182.bu.edu`
- Then type the tester account password:
`testec504`
- Go to project folder and check the file list:
`cd 504Project/group7/DeDuplicator/out/production/DeDuplicator`
`ls`
- The test.txt, test1.txt are two test files for you to test, the ‘a’ is a folder for you to test as well
- Input following command to add file and folder to the locker(type command one by one):
            ```
            java dedup -addFile a -locker testLocker
            java dedup -addFile test.txt -locker testLocker
            java dedup -addFile test1.txt -locker testLocker
            ```
- Delete the test file and folder from original directory(type command one by one):
```
rm test.txt
rm test1.txt
Rm -r a
ls
```
You can see the above folder and files are deleted.
- Input the following command to retrieve the saved file from the locker(type command one by one):
```
            java dedup -retrieveFile test.txt -locker testLocker
            java dedup -retrieveFile test1.txt -locker testLocker
            java dedup -retrieveFile a -locker testLocker
            ls
            ```
            You can see the saved file and folder are retrieved to the original directory
- You can also do the file transfer between your computer and the server, to save your file. To do the file transfer, open a new terminal but don’t close the terminal you used before. In the new terminal, run the `hostname` command to check your computer’s hostname. Then type:
```
scp your-file-path tester@hostname project-directory
```
For example:
```
scp /home/user/Desktop/yourfile tester@dhcp-wifi-8021x-168-122-200-182.bu.edu /Users/tester/504Project/group7/DeDuplicator/out/production/DeDuplicator
```
The above command is in single line, no enter between each line!
- If you want to retrieve the test file to your computer, just do the opposite:
```
scp [tester@hostname] [project-directory] [your-hostname] [directory-to-save-the-file]
```
- Type `logout` to exit the server.


#### Ability to store directories of files as one entity instruction
- The method to store and retrieve folder is same as the operation of file.
- To save and retrieve the folder in IntelliJ, you need to save the folder under `/group7/DeDuplicator/`, then type the parameters in the by clicking ‘Edit configurations’ on the right top corner, the main function should set as dedup, then type command line arguments in ‘Program argument ’ block. All of the commands are listed below:
```
            -addFile folderName -locker testLocker
            -retrieveFile folderName -locker testLocker
            ```
- To save and retrieve the folder in terminal, you need to save the folder to `/group7/DeDuplicator/out/production/DeDuplicator`, then change the directory to `/group7/DeDuplicator/out/production/DeDuplicator`, type the following instructions:
```
            java dedup -addFile folderName -locker testLocker
            java dedup -retrieveFile folderName -locker testLocker
           ```
- Since the program treat the folder as a file as well, you can save a blank folder without any document and retrieve it perfectly. Also, the retrieved folder will keep the original directory logic. Last but not least, you can also retrieve the file in the saved folder individually.


#### Develop a Graphical User Interface that displays storage progress (and file allocation statistics) in real time.
- GUI will automatically show up when you run the program through command line in the first time.
- Close GUI will automatically exit the program.
- When adding file(including directory), first enter file name in `FileName` textField, and locker name in `LockerName` textField. Then press button `Store` to  add file to assigned locker. Empty textField may cause error.
- File(directory) you stored must locate at `current working directory`
- Retrieving file(directory) has the similar operation step to saving file. Then press button `Extract`. Empty textField may cause error.
- Searching substring, you need to enter your substring in `Search substring` textField and locker name in `LockerName` textField(the locker you want to search with this substring). Then you need to choose the encoding format of file for searching by choosing corresponding `RadioButton`.
- Both `Search substring` textField and `LockerName` textField must not be empty and you must choose and only choose one encoding format. Otherwise it may lead to program halt or error.
